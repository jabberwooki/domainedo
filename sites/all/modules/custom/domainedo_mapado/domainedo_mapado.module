<?php
/**
 * @file
 * Code for the Mapado feature.
 */

include_once 'domainedo_mapado.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */

function domainedo_mapado_form_show_node_form_alter(&$form, &$form_state, $form_id) {
  // Vertical tab "Mapado" moved to bottom of existing vertical tabs.
  //$form['#groups']['group_mapado']->weight = 2000;

  $form['field_mapado_apislug']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
}

/**
 * Implements hook_node_postinsert().
 *
 * Création du spectacle sur Mapado.
 *
 * La version 2018 utilise la notion de flag.
 * La version 2019 n'en n'a plus besoin.
 * (voir commentaires dans la fonction)
 */
function domainedo_mapado_node_postinsert($node) {
  $is_watchdog_on = false;
  if ($node->type == 'show') {
    if($is_watchdog_on) {
      watchdog('domainedo_mapado_post_action', "Postinsert (line ". __LINE__ . ") : The inserted node {$node->type} id is {$node->nid} from " . __FUNCTION__);
    }
    // Modifs 2019 - Envoi d'une requete de création (POST) à Mapado via l'API Ticketing, et non plus Media.
    // La doc de cette API : https://ticketing.mapado.net/doc.html
    $url = 'https://ticketing.mapado.net/v1/ticketings?fields=@id,title,slug,unlimitedStock';
    $request_result = domainedo_mapado_send_request_to_ticketing_api($url, 'POST', $node);
    if($is_watchdog_on) {
      watchdog('domainedo_mapado', "Postinsert (line ". __LINE__ . ") : Mapado insert response = {$request_result}");
    }

    // Ensuite on récupère la valeur du champ Mapado "slug" en vue de le stocker dans le node.
    $result_data = get_object_vars(json_decode($request_result));
    if ($result_data) {
      $slug = $result_data['slug'];
      $ticketing = $result_data['@id'];
      if ($is_watchdog_on) {
        watchdog('domainedo_mapado', "apiSlug of the node {$node->title} created on Mapado {$node->nid} is : {$slug}");
        watchdog('domainedo_mapado', "ticketing of the node {$node->title} created on Mapado {$node->nid} is : {$ticketing}");
      }
      $node->field_mapado_apislug['und'][0]['value'] = $slug;
      $node->field_mapado_ticketing['und'][0]['value'] = $ticketing;
      $node->field_boxoffice_url['und'][0]['url'] = 'https://domainedo.mapado.com/event/';

      // AJOUT 2019 - On s'occupe ensuite de créer les dates de ce spectacle dans Mapado.
      // Pour chaque date du spectacle, on envoie une requete POST a l'API ticketing,
      // mais cette fois-ci au endpoint /v1/event_dates.
      $url = 'https://ticketing.mapado.net/v1/event_dates?fields=@id,createdAt,startDate,endDate';
      $mapado_dates_ids = array();

      foreach ($node->field_show_dates['und'] as $key=>$date) {
        $data = array(
          'ticketing' => $ticketing,
          'startDate' => $date['value'],
        );
        $request_result = domainedo_mapado_send_event_date_request_to_mapado($url, 'POST', $data);
        if($is_watchdog_on) {
          watchdog('domainedo_mapado', "Date creation request result (line " . __LINE__ . ") = = {$request_result}");
        }
        $result_data = get_object_vars(json_decode($request_result));
        $mapado_dates_ids[$key]['value'] = $result_data['@id'];
      }
      // On n'utilise plus un champ texte unique dans lequel on sérialise le tableau des ids de date,
      // parce qu'à partir de 8 dates, le nombre de caractères à stocker dépasse 256.
      //$node->field_mapado_dates_ids['und'][0]['value'] = serialize($mapado_dates_ids);

      // On utilise à la place un champ texte multiple, chaque item de champ ne stockant qu'un seul id.
      $node->field_mapado_dates_ids['und'] = $mapado_dates_ids;

      // On va sauvegarder le node une seconde fois donc ça va déclencher le hook domainedo_mapado_node_postupdate() ci-dessous.
      // Pour éviter de déclencher une requête de mise à jour vers Mapado, on ajoute un flag au node.
      $node->flag = false;
      node_save($node);
    }
  }
}

/**
 * Implements hook_node_postupdate().
 *
 * Modification du spectacle sur Mapado
 *
 * Le code de cette fonction correspond à la version créée en 2018.
 * En 2019, il n'y a plus la notion de flog, voir commentaires dans la fonction domainedo_mapado_node_postinsert().
 * Mais la version 2018 continue à fonctionner comme on le souhaite en 2019, sans toucher au code.
 * La seule différence est qu'en 2019, on est toujours dans la situation 1 ($node n'a pas de flag).
 * On garde les 2 cas possibles, on ne sait jamais.
 *
 *
 */
function domainedo_mapado_node_postupdate($node) {
  $is_watchdog_on = false;

  if ($node->type == 'show') {
    if($is_watchdog_on) {watchdog('domainedo_mapado', "The updated node {$node->type} id is {$node->nid} from " . __FUNCTION__);}

    // SITUATION 1 : $node n'a pas de flag
    // C'est un update normal, le spectacle existait déjà sur domainedo.
    if (!isset($node->flag)) {
      if($is_watchdog_on) {watchdog('domainedo_mapado', "pas de flag" . " (ligne " . __LINE__ . ")");}

      // Attention, il y a 2 cas possibles :
      // 1 - champ apiSlug vide -> le spectacle a été créé avant la mise en place de Mapado -> Il faut l'insérer dans Mapado.
      // 2 - champ apiSlug renseigné -> le spectacle existe déjà sur Mapado -> il faut le mettre à jour sur Mapado aussi.

      // Cas 1 - Le spectacle n'existe pas encore sur Mapado, il faut le créer.
      if (!isset($node->field_mapado_apislug['und'][0]['value'])) {
        if($is_watchdog_on) {
          watchdog('domainedo_mapado', "pas de slug");
        }

        // Envoi d'une requête de création (POST) à Mapado.
        $url = 'https://ticketing.mapado.net/v1/ticketings?fields=@id,title,slug,eventDateList';
        $request_result = domainedo_mapado_send_request_to_ticketing_api($url, 'POST', $node);
        if($is_watchdog_on) {
          watchdog('domainedo_mapado', "Mapado insert response = {$request_result}");
        }

        // Ensuite on récupère la valeur du champ Mapado "slug" en vue de le stocker dans le node.
        $result_data = get_object_vars(json_decode($request_result));
        $slug = $result_data['slug'];
        $ticketing = $result_data['@id'];
        if ($is_watchdog_on) {
          watchdog('domainedo_mapado', "apiSlug of the node {$node->title} created on Mapado {$node->nid} is : {$slug}");
          watchdog('domainedo_mapado', "ticketing of the node {$node->title} created on Mapado {$node->nid} is : {$ticketing}");
        }
        $node->field_mapado_apislug['und'][0]['value'] = $slug;
        $node->field_mapado_ticketing['und'][0]['value'] = $ticketing;
        $node->field_boxoffice_url['und'][0]['url'] = 'https://domainedo.mapado.com/event/';

        // AJOUT 2019 - On s'occupe ensuite de créer les dates de ce spectacle dans Mapado.
        // Pour chaque date du spectacle, on envoie une requete POST a l'API ticketing,
        // mais cette fois-ci au endpoint /v1/event_dates.
        $url = 'https://ticketing.mapado.net/v1/event_dates?fields=@id,createdAt,startDate,endDate';
        $ticketing = '/v1/ticketings/' . substr($slug, 0, strpos($slug, '-'));
        $mapado_dates_ids = array();

        foreach ($node->field_show_dates['und'] as $date) {
          $data = array(
            'ticketing' => $ticketing,
            'startDate' => $date['value'],
          );
          $request_result = domainedo_mapado_send_event_date_request_to_mapado($url, 'POST', $data);
          if($is_watchdog_on) {
            watchdog('domainedo_mapado', "Date creation request result (line " . __LINE__ . ") = = {$request_result}");
          }
          $result_data = get_object_vars(json_decode($request_result));
          $mapado_dates_ids[$key]['value'] = $result_data['@id'];
        }
        // On n'utilise plus un champ texte unique dans lequel on sérialise le tableau des ids de date,
        // parce qu'à partir de 8 dates, le nombre de caractères à stocker dépasse 256.
        //$node->field_mapado_dates_ids['und'][0]['value'] = serialize($mapado_dates_ids);

        // On utilise à la place un champ texte multiple, chaque item de champ ne stockant qu'un seul id.
        $node->field_mapado_dates_ids['und'] = $mapado_dates_ids;

        // On va sauvegarder le node une seconde fois donc ça va déclencher le hook domainedo_mapado_node_postupdate() ci-dessous.
        // Pour éviter de déclencher une requête de mise à jour vers Mapado, on ajoute un flag au node.
        $node->flag = false;
        node_save($node);
      }
      // Cas 2 - Le spectacle existe déjà sur Mapado, il faut le mettre à jour.
      else {
        if($is_watchdog_on) {
          watchdog('domainedo_mapado', "y a un slug");
        }

        // 2.1 - Envoir d'une requête PUT de mise à jour de l'événement à Mapado.
        $slug = $node->field_mapado_apislug['und'][0]['value'];
        if (isset($node->field_mapado_ticketing['und'][0]['value'])) {
          $ticketing = $node->field_mapado_ticketing['und'][0]['value'];
        }
        else {
          $ticketing = '/v1/ticketings/' . substr($slug, 0, strpos($slug, '-'));
        }
        $url = 'https://ticketing.mapado.net' . $ticketing . '?fields=@id,title,imageList,slug';

        $request_result = domainedo_mapado_send_request_to_ticketing_api($url, 'PUT', $node);
        if($is_watchdog_on) {
          watchdog('domainedo_mapado', "mapado update response = {$request_result}");
        }

        if (!isset($node->field_boxoffice_url['und'][0]['url'])) {
          //$node_wrapper = entity_metadata_wrapper('node', $node);
          $node->field_boxoffice_url['und'][0]['url'] = 'https://domainedo.mapado.com/event/';
        }

        // 2.2 - Il faut aussi mettre à jour les dates Mapado.
        //$mapado_dates_ids = unserialize($node->field_mapado_dates_ids['und'][0]['value']);
        $mapado_dates_ids = $node->field_mapado_dates_ids['und'];
        $drupal_dates = $node->field_show_dates['und'];

        // On passe en revue les dates du tableau $drupal_dates.
        $new_mapado_dates_ids = array();
        foreach ($drupal_dates as $k1=>$date) {
          // Si l'id de date mapado d'index equivalent $k existe,
          // on met à jour la date mapado avec la date drupal.
          if (isset($mapado_dates_ids[$k1])) {
            $url = 'https://ticketing.mapado.net' . $mapado_dates_ids[$k1]['value'] .'?fields=@id,createdAt,startDate,endDate';
            $data = array(
              'ticketing' => $ticketing,
              'startDate' => $date['value'],
            );
            $request_result = domainedo_mapado_send_event_date_request_to_mapado($url, 'PUT', $data);
            if($is_watchdog_on) {
              watchdog('domainedo_mapado', "DATE UPDATE");
              watchdog('domainedo_mapado', "Date update request result (line " . __LINE__ . ") = = {$request_result}");
              watchdog('domainedo_mapado', "Date update index (line " . __LINE__ . ") = {$k1}");
            }
            $result_data = get_object_vars(json_decode($request_result));
            $new_mapado_dates_ids[$k1]['value'] = $result_data['@id'];
          }
          // Sinon, on crée une nouvelle date mapado.
          else {
            $url = 'https://ticketing.mapado.net/v1/event_dates?fields=@id,createdAt,startDate,endDate';
            $data = array(
              'ticketing' => $ticketing,
              'startDate' => $date['value'],
            );
            $request_result = domainedo_mapado_send_event_date_request_to_mapado($url, 'POST', $data);
            if($is_watchdog_on) {
              watchdog('domainedo_mapado', "DATE INSERT");
              watchdog('domainedo_mapado', "Date insert request result (line " . __LINE__ . ") = = {$request_result}");
              watchdog('domainedo_mapado', "Date insert index (line " . __LINE__ . ") = = {$k1}");
            }
            $result_data = get_object_vars(json_decode($request_result));
            $new_mapado_dates_ids[] = array('value' => $result_data['@id']);
          }
        }
        // On n'utilise plus un champ texte unique dans lequel on sérialise le tableau des ids de date,
        // parce qu'à partir de 8 dates, le nombre de caractères à stocker dépasse 256.
        //$node->field_mapado_dates_ids['und'][0]['value'] = serialize($mapado_dates_ids);

        // On utilise à la place un champ texte multiple, chaque item de champ ne stockant qu'un seul id.
        $node->field_mapado_dates_ids['und'] = $new_mapado_dates_ids;
        if($is_watchdog_on) {
              watchdog('domainedo_mapado', "New ids (line " . __LINE__ . ") = " .serialize($node->field_mapado_dates_ids['und']));
        }


        // Ensuite on passe en revue les dates du tableau $mapado_dates_ids
        foreach ($mapado_dates_ids as $k2=>$date_id) {
          // Si la date drupal d'index équivalent $k n'existe pas,
          // on supprime la date mapado.
          if (!isset($drupal_dates[$k2])) {
            $url = 'https://ticketing.mapado.net' . $date_id['value'] . '?fields=@id';
            $request_result = domainedo_mapado_send_event_date_request_to_mapado($url, 'DELETE', array());
            if($is_watchdog_on) {
              watchdog('domainedo_mapado', "DATE DELETE");
              watchdog('domainedo_mapado', "Date deletion request result (line " . __LINE__ . ") = = {$request_result}");
              watchdog('domainedo_mapado', "Date deletion index = {$k2}");
            }
          }
        }

        $node->flag = false;
        node_save($node);
      }
    }
    // SITUATION 2 : $node a un flag
    // Le spectacle n'existait pas encore sur domainedo.
    // C'est un update provoqué juste après la création du node à la fin de la fonction domainedo_mapado_node_postinsert() ci-dessus.
    // servant à stocker la valeur des champ slug de l'événement Mapado dans le champ field_mapado_apiSlug de Drupal
    // et les valeurs des identifiants de date Mapado dans le champ field_mapado_dates_ids de Drupal.
    // Il ne faut RIEN FAIRE sur Mapado.
    else {
      if($is_watchdog_on) {
        watchdog('domainedo_mapado', "y a un flag : on ne fait rien");
      }
    }
  }
}

/**
 * Implements hook_node_postdelete().
 *
 * Suppression du spectacle sur Mapado
 */
function domainedo_mapado_node_postdelete($node) {
  $is_watchdog_on = false;
  if ($node->type == 'show') {
    if($is_watchdog_on) {watchdog('domainedo_mapado', "The deleted node {$node->type} id is {$node->nid} from " . __FUNCTION__);}

    // Envoi d'une requête de suppression à Mapado.
    //$url = 'https://api.mapado.net/v2/activities/' . $node->field_mapado_apislug['und'][0]['value'] .'.json?fields=trashStatus';
    $slug = $node->field_mapado_apislug['und'][0]['value'];
    $ticketingId = substr($slug, 0, strpos($slug, '-'));
    $url = 'https://ticketing.mapado.net/v1/ticketings/'
      . $ticketingId . '?fields=id,title';
    $request_result = domainedo_mapado_send_request_to_ticketing_api($url, 'DELETE', $node);
    if($is_watchdog_on) {
      watchdog('domainedo_mapado', "mapado delete response = {$request_result}");
    }
  }
}

/**
 * Récupère les données d'un node spectacle à envoyer à Mapado.
 *
 * @param $node
 * @return array Tableau contenant les données à envoyer à Mapado.
 *
 * ----------------- Champs obligatoires ---------------------------------------
 *
 * DOMAINE D'O                                  MAPADO
 * - title                                      - title
 * - "/v2/activities/montpellier--domaine-do"   - place
 * - descrption                                 - description
 * - field_show_dates                           - formattedSchedule
 *
 * ----------------- Champs supplémentaires ------------------------------------
 *
 * DOMAINE D'O                                  MAPADO
 * - field_show_type                            - ??? (Rubrique)
 * - field_location                             - concaténé en tête du champ description.
 * - field_scald_image                          - imageList
 * - field_by                                   - ??? (Interprète)
 * - field_festival                             - ???
 */
function domainedo_mapado_get_data_for_mapado($node) {
  $show_data = array();
  $is_watchdog_on = false;

  // 1 - Nom de l'événement (title -> title)
  $title = $node->title;
  $show_data['title'] = $title;
  if($is_watchdog_on) {
    watchdog('domainedo_mapado', "Titre = {$title}");
  }

  // 2 - Ou se déroule l'événément (field_lieu_generique -> place)
  // Toujours la même valeur : c'est l'apliSlug du lieu Domaine d'O sur Mapado
//  $place = '/v2/activities/montpellier--domaine-do';
//  $show_data['place'] = $place;
//  if($is_watchdog_on) {
//    watchdog('domainedo_mapado', "Place = {$place}");
//  }

  // Version 2019 - Gestion avancée des lieux
  // On suppose que seuls les spectacles ayant lieu au domaine d'O (intra-muros) peuvent avoir plusieurs lieux.
  // Pour les autres, si une meme représentation a lieu à 2 endroits différents, alors ce sont des spectacles différents.
  // La logique est la suivante :
  //
  // Si intra-muros alors
  //     on récupère le ou les lieux et on récupère les données suivantes :
  //     $place = Domaine d'O - Lieu 1, lieu 2...
  //     $city = Montpellier
  // Sinon
  //     on récupère le lieu unique et on le découpe pour avoir :
  //     $place = lieu dans la ville
  //     $ville = ville indiquée
  //
  // A NOTER : Il est important de saisir les termes du vocabulaire 'Lieux de spectacle'
  // dans le bon ordre : ville - lieu
  // et non l'inverse.
  //
  // Coté Mapado, la logique est la suivante (on ne peut pas la modifier) :
  //
  // Si "place" ET "city" ne sont pas renseignés alors
  //     Mapado affiche "Domaine d'O - Montpellier" (qui je suppose est la valeur affichée de "venue":"/v1/venues/391")
  //     sur la liste des évenements, visible de l'admin mapado seulement
  //     ainsi que sur la page d'achat de billets, visible des internautes.
  // Sinon
  //     Mapado affiche "place - ville" sur la liste des événements
  //     Mais n'affiche que

  $location_tid = $node->field_location['und'][0]['tid'];
  $location = taxonomy_term_load($location_tid)->name;
  $parents = taxonomy_get_parents($location_tid);
  $parent = reset($parents)->name;

  // Si c'est au domaine d'O
  if (strtoupper($parent) == 'INTRAMUROS') {
    $is_intramuros = true;
    // S'il y a plus d'un lieu, on récupère aussi les autres noms de lieu
    if (count($node->field_location['und']) > 1) {
      $locations = array();
      foreach ($node->field_location['und'] as $item) {
        $term = taxonomy_term_load($item['tid']);
        $locations[] = $term->name;
      }
      $location = implode(', ', $locations);
    }
    $show_data['place'] = 'Domaine d\'O - ' . $location;
    $show_data['city'] = 'Montpellier';
  }
  // Sinon
  elseif (strtoupper($parent) == 'EXTRAMUROS') {
    $is_intramuros = false;
    $show_address = explode(' - ', $location);
    $city = $show_address[0];
    $place = $show_address[1];
    $show_data['place'] = $place;
    $show_data['city'] = $city;
  }

  //dpm($show_data['place'] . ' - ' . $show_data['city']);

//  // 3 - Description (body -> description)
//  $desc = $node->body['und'][0]['value'];
//  $show_data['description'] = strip_tags($desc);
//  if($is_watchdog_on) {
//    watchdog('domainedo_mapado', "Description = {$desc}");
//  }

  // 4- Dates et horaires (field_show_dates -> formattedSchedule)
//  $dates_string = '';
//  foreach ($node->field_show_dates['und'] as $date) {
//    $viewed_date = field_view_value('node', $node, 'field_show_dates', $date);
//    $cleaned_date = strip_tags(render($viewed_date));
//    $dates_string .= $cleaned_date . '. ';
//    //$dates_string .= str_replace('T', ' à ', $date['value']) . '. ';
//  }
//  $show_data['formattedSchedule'] = $dates_string;
//  if($is_watchdog_on) {
//    watchdog('domainedo_mapado', "Dates = {$dates_string}");
//  }

  /////////////////////////////////////////////////////////////////
  // RECUPERATION DES AUTRES CHAMPS QU'IL EST POSSIBLE D'ENVOYER //
  /////////////////////////////////////////////////////////////////

  // Rubrique (field_show_type -> ???) - Il faudrait y stocker le type de spectacle (field_show_type)
  $term = taxonomy_term_load($node->field_show_type['und'][0]['tid']);
  $show_type = $term->name;
  //$show_data['showType'] = $show_type;
  if($is_watchdog_on) {
    watchdog('domainedo_mapado', "Show type = {$show_type}");
  }

  // A quel endroit dans le domaine d'O ?
  // Il faut le concaténer avec la description (field_location -> field_location + description).
  //
  // Version 2019
  // Lorsque ce n'est pas un spectacle intra-muros,
  // il faut préciser la ville et le lieu dans le texte de la description.
  if (!$is_intramuros) {
    $show_data['description'] = 'LIEU : ' . $city . " - " . $place ."." . "\n"
      . $show_data['description'];
    if ($is_watchdog_on) {
      watchdog('domainedo_mapado', "LIEU = {$city} - {$place}.");
    }
  }

  // Medias (field_scald_image -> imageList)
  if (isset($node->field_scald_image['und'][0]['sid'])) {
    $atom = scald_atom_load($node->field_scald_image['und'][0]['sid']);
    $image_url = file_create_url($atom->file_source);
    // Si je teste depuis mon dev local, le serveur d'images Mapado ne pourra pas me voir.
    // Donc je change pour l'url du serveur de recette qui, lui, sera accessible par Mapado.
    // Contrainte pour les tests en local : il faut utiliser une image déjà présente sur la recette.
    if ($_SERVER['HTTP_HOST'] == 'www.domainedo.localhost') {
      $image_url = str_replace('www.domainedo.localhost', 'www.domainedo.fr', $image_url);
    }
    $show_data['imageUrl'] = $image_url;
    if ($is_watchdog_on) {
      watchdog('domainedo_mapado', "Image url = {$image_url}");
    }
  }

  // Interprète (field_by -> ???)
  // $node->field_by['und'][0]['target_id']
  $structure_titles = array();
  foreach($node->field_by['und'] as $structure) {
    $structure = node_load($structure['target_id']);
    $structure_titles[] = $structure->title;
  }
  $structure_titles_string = implode(' / ', $structure_titles);
  //$show_data['performer'] = $structure_titles_string;
  if($is_watchdog_on) {
    watchdog('domainedo_mapado', "Interprète: {$structure_titles_string}");
  }

  // Festival (field_festival -> ??? pas encore disponible).
  if (isset($node->field_festival['und'][0]['target_id'])) {
    $festival = node_load($node->field_festival['und'][0]['target_id']);
    //$show_data['festival'] = $festival_title;
    if ($is_watchdog_on) {
      watchdog('domainedo_mapado', "Festival: {$festival->title}");
    }
  }

  // Url de la fiche spectacle sur domaine d'O.
//  $official_url = $GLOBALS['base_url'] . '/' . drupal_get_path_alias("node/{$node->nid}");
//  if ($_SERVER['HTTP_HOST'] == 'www.domainedo.localhost') {
//    $official_url = str_replace('www.domainedo.localhost', 'rece.domainedo.fr', $official_url);
//  }
//  $show_data['urlList'] = array(
//    "official" => $official_url
//  );

  return $show_data;
}

function domainedo_mapado_send_request_to_ticketing_api($url, $method='GET', $node=null) {
  $is_watchdog_on = false;

  // On commence à préparer la requete avec la librairie cURL de PHP.
  $ch = curl_init($url);
  $headers = array();
  $headers[] = "Authorization: Bearer ZWZkYTFmZWJmNTJhNDM4Y2Y2MTc1ZGMzZDQ1MTg0Nzk1ZjNiYTk2ZDFhZTc5YzIxODZiMjQwNDg1YTM0ODgzYg";

  // 1 - LECTURE SEULE
  if ($method == 'GET') {
    // Rien à faire de particulier, c'est la méthode par défaut de la librairie PHP cURL.
    // L'url doit contenir l'identifiant Mapado de la ressource ticketing à lire.
  }
  // 2 - CREATION, MODIFICATION
  elseif ($method == 'POST' || $method == 'PUT') {
    // 2.0 - On récupère d'abord les données Drupal
    if ($is_watchdog_on && !$node) {
      watchdog('domainedo_mapado', "Attention ! Aucun node passé en paramètre, impossible de charger des données.");
    }
    $data = domainedo_mapado_get_data_for_mapado($node);

    if ($is_watchdog_on) {
      watchdog('domainedo_mapado', "Titre du node dont on a récupéré les données : {$data['title']}");
    }

    // 2.1 - Envoi préalable de l'image, s'il y en a une, sur img.mapado.net et récupération de son imagePath
    if (isset($data['imageUrl'])) {
      $ch2 = curl_init();
      curl_setopt($ch2, CURLOPT_URL, "https://www.mapado.com/image/upload/?width=160&height=100");
      curl_setopt($ch2, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch2, CURLOPT_POSTFIELDS, "url=" . $data['imageUrl']);
      curl_setopt($ch2, CURLOPT_POST, 1);
      curl_setopt($ch2, CURLOPT_ENCODING, 'gzip, deflate');

      $headers2 = array();
      $headers2[] = "Origin: https://www.mapado.com";
      $headers2[] = "Content-Type: application/x-www-form-urlencoded";
      $headers2[] = "Accept: */*";
      $headers2[] = "Referer: https://www.mapado.com/create-activity";
      $headers2[] = "X-Requested-With: XMLHttpRequest";
      $headers2[] = "Connection: keep-alive";
      curl_setopt($ch2, CURLOPT_HTTPHEADER, $headers2);
      $result = curl_exec($ch2);

      $imagePath = '';
      if (curl_errno($ch2)) {
        if ($is_watchdog_on) {
          watchdog('domainedo_mapado', "Curl error: (line " . __LINE__ . ")" . curl_error($ch2));
        }
      }
      else {
        $decoded_result = json_decode($result);
        $imagePath = $decoded_result->imagePath;
      }
      curl_close($ch2);

      // On ajoute imagePath aux données.
      // ATTENTION ! imageList est deprecated. On utilise maintenant mediaList
      // et ce champ est maintenant un tableau d'objets.
      // Voir documentation API Ticketing : https://ticketing.mapado.net/doc.html#operation/postTicketingCollection

      // $data['imageList'] = array($imagePath);
      $data['mediaList'] = array(
        array(
          'imageType' => 'image',
          'path' => $imagePath
        ),
      );
      if ($is_watchdog_on) {
        watchdog('domainedo_mapado', "imagePath: {$imagePath}");
      }

      // Puis on supprime "imageUrl" des données (ce champ est inconnu de l'API).
      unset($data['imageUrl']);
    }

    // 2.2 - Si création, il faut ajouter les données Mapado utiles.
    if ($method == 'POST') {
      curl_setopt($ch, CURLOPT_POST, 1);
      // Rattachement au portefeuille domaine d'O. D'après la doc de l'API, c'est le seul champ obligatoire.
      $data['wallet'] = '/v1/wallets/858';
      // Si on laisse 'permanent' à true (valeur defaut), on ne pourra pas y rattacher de dates.
      // Explication fournie par Julien Deniau (rien dans la doc de l'API).
      $data['permanent'] = false;
      // Bien que non indiqué dans la doc, timezone est obligatoire, sinon "Internal Server Error".
      $data['timezone'] = 'Europe/Paris';
      // Lieu (Domaine d'O)
      $data['venue'] = '/v1/venues/391';
      // Ville
      $data['city'] = 'Montpellier';
    }
    // Sinon
    elseif ($method == 'PUT') {
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
    }
    // 2.3 - On finit de préparer la requete en écriture.
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    $headers[] = "Content-Type: application/json";
  }
  // 3 - SUPPRESSION
  elseif ($method == 'DELETE') {
    // Pas grand chose à faire là non plus, à part dire qu'on lance une requete de suppression.
    // L'url doit contenir l'identifiant Mapado de la ressource ticketing à supprimer.
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
  }

  // On finit de préparer la requete.
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1);

  // Puis on l'exécute.
  $result = curl_exec($ch);

  if ($is_watchdog_on) {
    if (curl_errno($ch)) {
      watchdog('domainedo_mapado', "Curl error (line " . __LINE__ . ") : " . curl_error($ch));
    }
    else {
      $result_string = serialize($result);
      watchdog('domainedo_mapado', "Request result (line " . __LINE__ . ") : {$result_string}");
      if ($node) {
        watchdog('domainedo_mapado', "{$method} on Mapado Ticketing for node '{$node->title}'.");
      }
    }
  }
  curl_close ($ch);

  return $result;
}

function domainedo_mapado_send_event_date_request_to_mapado($url, $method='POST', $data) {
  $is_watchdog_on = false;

  // On commence à préparer la requete.
  $ch = curl_init($url);
  $headers = array();
  $headers[] = "Authorization: Bearer ZWZkYTFmZWJmNTJhNDM4Y2Y2MTc1ZGMzZDQ1MTg0Nzk1ZjNiYTk2ZDFhZTc5YzIxODZiMjQwNDg1YTM0ODgzYg";

  if ($is_watchdog_on) {
    watchdog('domainedo_mapado', "Data sent (line" . __LINE__ . ") : " . serialize($data));
  }

  if ($method == 'GET') {
    // On peut en avoir besoin un jour.
  }
  elseif ($method == 'POST') {
    // --------- Ajout 2020-12-11 ----------------------------------------------
    // Gestion du stock de places.
    // Suite à un bug découvert par Mapado dans leur API,
    // il faut spécifier que le nombre de places est illimité.
    // (unlimitedStock ne peut pas etre égal à FALSE et totalStock à NULL - voir échanges email du 9, 11 et 11 déc 2020)
    $data['unlimitedStock'] = true;
    // --------- Fin de Ajout 2020-12-11 ---------------------------------------

    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    $headers[] = "Content-Type: application/json";
  }
  elseif ($method == 'PUT') {
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    $headers[] = "Content-Type: application/json";
  }
  elseif ($method == 'DELETE') {
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
  }

  // On finit de préparer la requete.
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER, 1);

  // Puis on l'exécute.
  $result = curl_exec($ch);

  if ($is_watchdog_on) {
    if (curl_errno($ch)) {
      watchdog('domainedo_mapado', "Curl error (line " . __LINE__ . ") : " . curl_error($ch));
    }
    else {
      $result_string = serialize($result);
      watchdog('domainedo_mapado', "Date {$method} url (line " . __LINE__ . ") : {$url}");
      watchdog('domainedo_mapado', "Date {$method} request result (line " . __LINE__ . ") : {$result_string}");
    }
  }
  curl_close ($ch);

  return $result;
}

/**
 * Implements hook_node_view_alter().
 */
/**
 * Implements hook_node_view().
 */
function domainedo_mapado_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'show') {
    $is_on_sale = TRUE;

    // calcul de la dernière date de représentation
    // on recule la date de 4 h pour permettre aux internautes d'acheter alors que le
    // spectacle est en cours
    $today = date("Y-m-d\TH:i:sP", strtotime('-4 hours'));

    $next_show = 0;
    // Dès qu'un spectacle a une date dans le futur, on arrête la boucle pour dire que la
    // variable next_show est vraie
    foreach ($node->field_show_dates['und'] as $item) {
      if($item['value'] > $today) {
        $next_show = 1;
        break;
      }
    }
    // Ajout Yvan : si le spectacle est passé on cache le bouton RESERVER
    if (!$next_show) {
      $is_on_sale = FALSE;
    }
    /**
     * si le spectacle est en mode "billetterie externalisée" ou "gratuit"
     * on affiche le bouton réserver comme un lien vers le spectacle
     * Le champ "info supplémentaire" devra être renseigné pour donner des infos sur
     * la billetterie externalisée ou sur la gratuité
     */
    else if($node->field_reservation['und'][0]['value'] == 7 ||
    $node->field_reservation['und'][0]['value'] == 8) {
      changeReservationButtonToShowView($node);
    }
    // fin ajout Yvan

    // Si le spectacle est connu sur mapado, on vérifie s'il est en vente.
    // Pour vérifier ça, dans la version 2019, on accède directement et uniquement aux infos via l'API Ticketing.
    // Plus besoin, comme en 2018, de faire d'abord une requete sur l'API Media, puis si isOnSale == True, faire une seconde requete sur l'API Ticketing.
    else if (isset($node->field_mapado_apislug['und'][0]['value'])) {
      $slug = $node->field_mapado_apislug['und'][0]['value'];
      if (isset($node->field_mapado_ticketing['und'][0]['value'])) {
        $ticketing = $node->field_mapado_ticketing['und'][0]['value'];
      }
      else {
        $ticketing = '/v1/ticketings/' . substr($slug, 0, strpos($slug, '-'));
      }
      $url = 'https://ticketing.mapado.net' . $ticketing . '?fields=@id,title,slug,isOnSale,availabilityStatus,sellingDeviceData{hasTicketPriceOnSale,sellingDevice{@id,minisite{@id,domain}}}';

      $request_result = domainedo_mapado_send_request_to_ticketing_api($url);
      $result_data = json_decode($request_result);

      // isOnSale passe à TRUE dès qu'on met une séance en vente, meme si celle-ci n'a pas encore de tarifs associés.
      // Donc il est insuffisant et inutile de tester isOnSale.
      // Il faut tester directement la valeur de availabilityStatus :
      // - si aucune séance en vente ->  pastOrClosed
      // - si séance en vente, mais pas encore de tarif -> noTicketPrice
      // - si séance en vente avec tarif -> onSale
      // -si tout vendu -> soldOut (cas à vérifier auprès de Mapado).
      // et vérifier que sa valeur soit "onSale".

      // S'il n'est pas en vente, on cache le bouton RESERVER.
      if ($result_data->availabilityStatus != 'onSale') {
        $is_on_sale = FALSE;
      }
      // Sinon il faut vérifier qu'il y a vente sur le canal domainedo (= site web)
      else {
        $has_price = false;
        foreach ($result_data->sellingDeviceData as $item) {
          if ($item->sellingDevice->minisite && $item->sellingDevice->minisite->domain == 'domainedo.mapado.com' && $item->hasTicketPriceOnSale) {
            $has_price = true;
          }
        }

        if ($has_price) {
          $node->content['field_boxoffice_url'][0]['#element']['url'] = "https://domainedo.mapado.com/event/$result_data->slug";
          $node->content['field_boxoffice_url'][0]['#element']['attributes']['class'] = '';
        }
        else {
          $is_on_sale = FALSE;
        }
      }
    }
    // Si le spectacle n'est pas connu sur mapado, on cache le bouton RESERVER.
    else {
      $is_on_sale = FALSE;
    }

    if (!$is_on_sale) {
      if($view_mode == "teaser") {
        // on renvoie vers le spectacle car le spectacle n'est pas à vendre et on est dans le teaser
        changeReservationButtonToShowView($node);
        // billetterie externalisée : on laisse un bouton réserver mais différent...
        /* if($node->field_reservation['und'][0]['value'] == 7) {
        } */
      }
      if($view_mode == "full") {
        unset($node->content['field_boxoffice_url']);
      }
    }
  }
}
function changeReservationButtonToShowView($node) {
  $path = drupal_get_path_alias('node/' . $node->nid);
  $node->content['field_boxoffice_url'][0]['#element']['attributes']['target'] = '_self';
  $node->content['field_boxoffice_url'][0]['#element']['attributes']['class'] = '';
  $node->content['field_boxoffice_url'][0]['#element']['url'] = $path;
}
